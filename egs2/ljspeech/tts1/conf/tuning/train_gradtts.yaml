# This configuration is for ESPnet2 to train Tacotron 2. Compared to the
# original paper, this configuration additionally use the guided attention
# loss to accelerate the learning of the diagonal attention. It requires
# only a single GPU with 12 GB memory and it takes ~3 days to finish the
# training on Titan V.

##########################################################
#                  TTS MODEL SETTING                     #
##########################################################
tts: gradtts                     # model architecture
tts_conf:                        # keyword arguments for the selected model
    adim: 192 
    aheads: 2 # == grad-tts n_heads
    elayers: 4 # == grad-tts n_enc_layers
    eunits: 768 # == grad-tts filter_channels
    dlayers: 4        # number of decoder layers
    dunits: 768      # number of decoder ff units
    encoder_normalize_before: True    # whether to perform layer normalization before the input
    decoder_normalize_before: True    # whether to perform layer normalization before the input
    positionwise_layer_type: conv1d   # type of position-wise layer
    positionwise_conv_kernel_size: 3 # == grad-tts enc_kernel
    use_masking: True                 # whether to apply masking for padded part in loss calculation
    use_scaled_pos_enc: True          # whether to use scaled positional encoding
    duration_predictor_layers: 2      # number of layers of duration predictor
    duration_predictor_chans: 256     # number of channels of duration predictor
    duration_predictor_kernel_size: 3 # filter size of duration predictor
    transformer_enc_dropout_rate: 0.2            # dropout rate for transformer encoder layer
    transformer_enc_positional_dropout_rate: 0.2 # dropout rate for transformer encoder positional encoding
    transformer_enc_attn_dropout_rate: 0.2       # dropout rate for transformer encoder attention layer
    transformer_dec_dropout_rate: 0.2            # dropout rate for transformer decoder layer
    transformer_dec_positional_dropout_rate: 0.2 # dropout rate for transformer decoder positional encoding
    transformer_dec_attn_dropout_rate: 0.2       # dropout rate for transformer decoder attention layer
    init_type: xavier_uniform         # initialization type
    init_enc_alpha: 1.0               # initial value of alpha of encoder scaled position encoding
    init_dec_alpha: 1.0               # initial value of alpha of decoder scaled position encoding
    ddim: 64 #  == grad-tts dec_dim
    beta_min: 0.05
    beta_max: 20.0
    pe_scale: 1000
    pitch_predictor_layers: 5                  # number of conv layers in pitch predictor
    pitch_predictor_chans: 256                 # number of channels of conv layers in pitch predictor
    pitch_predictor_kernel_size: 5             # kernel size of conv leyers in pitch predictor
    pitch_predictor_dropout: 0.5               # dropout rate in pitch predictor
    pitch_embed_kernel_size: 1                 # kernel size of conv embedding layer for pitch
    pitch_embed_dropout: 0.0                   # dropout rate after conv embedding layer for pitch
    stop_gradient_from_pitch_predictor: true   # whether to stop the gradient from pitch predictor to encoder
    energy_predictor_layers: 2                 # number of conv layers in energy predictor
    energy_predictor_chans: 256                # number of channels of conv layers in energy predictor
    energy_predictor_kernel_size: 3            # kernel size of conv leyers in energy predictor
    energy_predictor_dropout: 0.5              # dropout rate in energy predictor
    energy_embed_kernel_size: 1                # kernel size of conv embedding layer for energy
    energy_embed_dropout: 0.0                  # dropout rate after conv embedding layer for energy
    stop_gradient_from_energy_predictor: false # whether to stop the gradient from energy predictor to encoder

# extra module for additional inputs
pitch_extract: dio           # pitch extractor type
pitch_normalize: global_mvn  # normalizer for the pitch feature
energy_extract: energy       # energy extractor type
energy_normalize: global_mvn # normalizer for the energy feature

##########################################################
#                  OPTIMIZER SETTING                     #
##########################################################
optim: adam           # optimizer type
optim_conf:           # keyword arguments for selected optimizer
    lr: 2.0e-04       # learning rate
    eps: 1.0e-06      # epsilon
    weight_decay: 0.0 # weight decay coefficient

##########################################################
#                OTHER TRAINING SETTING                  #
##########################################################
num_iters_per_epoch: 800    # number of iterations per epoch
max_epoch: 1000            # number of epochs
grad_clip: 1.0              # gradient clipping norm
grad_noise: false           # whether to use gradient noise injection
accum_grad: 1               # gradient accumulation
# batch_bins: 1600000       # batch bins (for feats_type=fbank)
batch_bins: 1000000         # batch bins (for feats_type=raw, *= n_shift / n_mels)
batch_type: numel           # how to make batch
sort_in_batch: descending   # how to sort data in making batch
sort_batch: descending      # how to sort created batches
num_workers: 1              # number of workers of data loader
train_dtype: float32        # dtype in training
log_interval: null          # log interval in iterations
keep_nbest_models: 5        # number of models to keep
num_att_plot: 3             # number of attention figures to be saved in every check
seed: 0                     # random seed number
best_model_criterion:
-   - valid
    - loss
    - min
-   - train
    - loss
    - min
